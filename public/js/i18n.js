
/**
 * i18n - Internationalization module for Expense Tracker Pro
 * Fully self-contained with EN/RU/ET translations and persistence.
 */

const SUPPORTED_LANGUAGES = {
  en: { name: 'English', flag: 'üá¨üáß', rtl: false, defaultCurrency: 'USD' },
  ru: { name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫', rtl: false, defaultCurrency: 'USD' },
  et: { name: 'Eesti',   flag: 'üá™üá™', rtl: false, defaultCurrency: 'EUR' }
};
const DEFAULT_LANGUAGE = 'en';
const SETTINGS_KEY = 'expenseTrackerSettings';

let currentLanguage = DEFAULT_LANGUAGE;
let currentCurrency = 'USD';

const translations = {
  en: {
    // App title
    appName: 'Expense Tracker Pro',

    // Navigation
    dashboard: 'Dashboard',
    transactions: 'Transactions',
    categories: 'Categories',
    settings: 'Settings',

    // Common
    save: 'Save',
    cancel: 'Cancel',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    back: 'Back',
    loading: 'Loading...',
    confirmDelete: 'Are you sure you want to delete this item?',
    actions: 'Actions',
    close: 'Close',
    yes: 'Yes',
    no: 'No',
    all: 'All',
    filter: 'Filter',
    reset: 'Reset',
    apply: 'Apply',
    search: 'Search',

    // Dashboard
    welcome: 'Welcome back',
    balance: 'Balance',
    income: 'Income',
    expense: 'Expense',
    recentTransactions: 'Recent Transactions',
    noTransactions: 'No transactions yet. Add your first transaction to get started!',
    viewAll: 'View All',
    totalIncome: 'Total Income',
    totalExpense: 'Total Expense',
    expenseByCategory: 'Expense by Category',
    incomeVsExpense: 'Income vs Expense',
    thisMonth: 'This Month',
    lastMonth: 'Last Month',
    thisYear: 'This Year',
    custom: 'Custom',

    // Transactions
    transaction: 'Transaction',
    addTransaction: 'Add Transaction',
    editTransaction: 'Edit Transaction',
    deleteTransaction: 'Delete Transaction',
    transactionAdded: 'Transaction added successfully',
    transactionUpdated: 'Transaction updated successfully',
    transactionDeleted: 'Transaction deleted',
    amount: 'Amount',
    date: 'Date',
    description: 'Description',
    category: 'Category',
    type: 'Type',
    note: 'Note',
    notes: 'Notes',
    incomeType: 'Income',
    expenseType: 'Expense',
    transactionHistory: 'Transaction History',
    transactionsFound: 'transactions found',
    transactionsCount: 'transactions',
    transactionDate: 'Date',
    transactionType: 'Type',
    transactionCategory: 'Category',
    transactionAmount: 'Amount',
    transactionNote: 'Note',
    fromDate: 'From Date',
    toDate: 'To Date',
    selectCategory: 'Select a category',
    selectType: 'Select a type',

    // Categories
    addCategory: 'Add Category',
    editCategory: 'Edit Category',
    deleteCategory: 'Delete Category',
    categoryName: 'Category Name',
    categoryType: 'Category Type',
    categoryAdded: 'Category added successfully',
    categoryUpdated: 'Category updated successfully',
    categoryDeleted: 'Category deleted',
    categoryManagement: 'Category Management',
    categoriesCount: 'categories',
    color: 'Color',
    icon: 'Icon',
    preview: 'Preview',

    // Settings
    language: 'Language',
    currency: 'Currency',
    dateFormat: 'Date Format',
    theme: 'Theme',
    light: 'Light',
    dark: 'Dark',
    system: 'System',
    appSettings: 'Application Settings',
    customizeApp: 'Customize your application preferences',
    decimalPrecision: 'Decimal Precision',
    twoDecimals: '2 decimal places (e.g., 10.99)',
    noDecimals: 'No decimals (e.g., 11)',
    dataManagement: 'Data Management',
    exportData: 'Export Data',
    importData: 'Import Data',
    backupInfo: 'Backup Information',
    lastBackup: 'Last Backup',
    backupSize: 'Backup Size',
    accountSettings: 'Account Settings',
    emailAddress: 'Email Address',
    timeZone: 'Time Zone',
    saveChanges: 'Save Changes',
    resetToDefaults: 'Reset to Defaults',

    // Errors
    error: {
      required: 'This field is required',
      invalidEmail: 'Please enter a valid email address',
      passwordMismatch: 'Passwords do not match',
      minLength: 'Minimum length: {{min}} characters',
      maxLength: 'Maximum length: {{max}} characters',
      invalidDate: 'Invalid date format',
      invalidAmount: 'Please enter a valid amount',
      invalidNumber: 'Please enter a valid number',
      invalidCategory: 'Please select a valid category',
      invalidType: 'Please select a valid type',
      invalidFile: 'Invalid file format',
      fileTooLarge: 'File is too large',
      uploadFailed: 'File upload failed',
      loadDashboard: 'Failed to load dashboard data',
      loadTransactions: 'Failed to load transactions',
      loadCategories: 'Failed to load categories',
      loadSettings: 'Failed to load settings',
      saveSettings: 'Failed to save settings',
      deleteCategory: 'Cannot delete category that is in use by transactions',
      pageInit: 'Failed to initialize the page',
      languageChange: 'Failed to change language',
      unknown: 'An unknown error occurred'
    },

    // Success messages
    success: {
      settingsSaved: 'Settings saved successfully',
      categoryAdded: 'Category added successfully',
      categoryUpdated: 'Category updated successfully',
      categoryDeleted: 'Category deleted successfully',
      transactionAdded: 'Transaction added successfully',
      transactionUpdated: 'Transaction updated successfully',
      transactionDeleted: 'Transaction deleted successfully'
    },

    // Confirmation dialogs
    confirm: {
      deleteTransaction: 'Are you sure you want to delete this transaction?',
      deleteCategory: 'Are you sure you want to delete this category?',
      resetSettings: 'Are you sure you want to reset all settings to default values?',
      importData: 'This will overwrite all existing data. Are you sure you want to continue?'
    },

    // Placeholders
    placeholder: {
      search: 'Search...',
      selectDate: 'Select a date',
      selectCategory: 'Select a category',
      selectType: 'Select a type',
      enterAmount: 'Enter amount',
      enterDescription: 'Enter description',
      enterNote: 'Add a note (optional)'
    }
  },

  ru: {
    appName: '–£—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤',
    // Navigation
    dashboard: '–ì–ª–∞–≤–Ω–∞—è',
    transactions: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    categories: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
    settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    // Common
    save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
    cancel: '–û—Ç–º–µ–Ω–∞',
    delete: '–£–¥–∞–ª–∏—Ç—å',
    edit: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
    add: '–î–æ–±–∞–≤–∏—Ç—å',
    back: '–ù–∞–∑–∞–¥',
    loading: '–ó–∞–≥—Ä—É–∑–∫–∞...',
    confirmDelete: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?',
    actions: '–î–µ–π—Å—Ç–≤–∏—è',
    close: '–ó–∞–∫—Ä—ã—Ç—å',
    yes: '–î–∞',
    no: '–ù–µ—Ç',
    all: '–í—Å–µ',
    filter: '–§–∏–ª—å—Ç—Ä',
    reset: '–°–±—Ä–æ—Å–∏—Ç—å',
    apply: '–ü—Ä–∏–º–µ–Ω–∏—Ç—å',
    search: '–ü–æ–∏—Å–∫',
    // Dashboard
    welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
    balance: '–ë–∞–ª–∞–Ω—Å',
    income: '–î–æ—Ö–æ–¥',
    expense: '–†–∞—Å—Ö–æ–¥',
    recentTransactions: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    noTransactions: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é!',
    viewAll: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ',
    totalIncome: '–û–±—â–∏–π –¥–æ—Ö–æ–¥',
    totalExpense: '–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥',
    expenseByCategory: '–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
    incomeVsExpense: '–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã',
    thisMonth: '–≠—Ç–æ—Ç –º–µ—Å—è—Ü',
    lastMonth: '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü',
    thisYear: '–≠—Ç–æ—Ç –≥–æ–¥',
    custom: '–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥',
    // Transactions
    transaction: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è',
    addTransaction: '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
    editTransaction: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
    deleteTransaction: '–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é',
    transactionAdded: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
    transactionUpdated: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
    transactionDeleted: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞',
    amount: '–°—É–º–º–∞',
    date: '–î–∞—Ç–∞',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ',
    category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    type: '–¢–∏–ø',
    note: '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ',
    notes: '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è',
    incomeType: '–î–æ—Ö–æ–¥',
    expenseType: '–†–∞—Å—Ö–æ–¥',
    transactionHistory: '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
    transactionsFound: '–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
    transactionsCount: '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
    transactionDate: '–î–∞—Ç–∞',
    transactionType: '–¢–∏–ø',
    transactionCategory: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    transactionAmount: '–°—É–º–º–∞',
    transactionNote: '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ',
    fromDate: '–° –¥–∞—Ç—ã',
    toDate: '–ü–æ –¥–∞—Ç—É',
    selectCategory: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
    selectType: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø',
    // Categories
    addCategory: '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
    editCategory: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
    deleteCategory: '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
    categoryName: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    categoryType: '–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    categoryAdded: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
    categoryUpdated: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
    categoryDeleted: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞',
    categoryManagement: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏',
    categoriesCount: '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    color: '–¶–≤–µ—Ç',
    icon: '–ò–∫–æ–Ω–∫–∞',
    preview: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
    // Settings
    language: '–Ø–∑—ã–∫',
    currency: '–í–∞–ª—é—Ç–∞',
    dateFormat: '–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã',
    theme: '–¢–µ–º–∞',
    light: '–°–≤–µ—Ç–ª–∞—è',
    dark: '–¢—ë–º–Ω–∞—è',
    system: '–°–∏—Å—Ç–µ–º–Ω–∞—è',
    appSettings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    customizeApp: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
    decimalPrecision: '–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
    twoDecimals: '2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10,99)',
    noDecimals: '–ë–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11)',
    dataManagement: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏',
    exportData: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
    importData: '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
    backupInfo: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏—è—Ö',
    lastBackup: '–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ø–∏—è',
    backupSize: '–†–∞–∑–º–µ—Ä –∫–æ–ø–∏–∏',
    accountSettings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞',
    emailAddress: '–≠–ª. –ø–æ—á—Ç–∞',
    timeZone: '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
    saveChanges: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
    resetToDefaults: '–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
    // Errors
    error: {
      required: '–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
      invalidEmail: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e‚Äëmail',
      passwordMismatch: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
      minLength: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {{min}} —Å–∏–º–≤–æ–ª–æ–≤',
      maxLength: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {{max}} —Å–∏–º–≤–æ–ª–æ–≤',
      invalidDate: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã',
      invalidAmount: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É',
      invalidNumber: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ',
      invalidCategory: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
      invalidType: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø',
      invalidFile: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞',
      fileTooLarge: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
      uploadFailed: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
      loadDashboard: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏',
      loadTransactions: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      loadCategories: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
      loadSettings: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      saveSettings: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫',
      deleteCategory: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö',
      pageInit: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
      languageChange: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
      unknown: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    },
    success: {
      settingsSaved: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      categoryAdded: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      categoryUpdated: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      categoryDeleted: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞',
      transactionAdded: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      transactionUpdated: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      transactionDeleted: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞'
    },
    confirm: {
      deleteTransaction: '–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?',
      deleteCategory: '–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?',
      resetSettings: '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?',
      importData: '–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?'
    },
    placeholder: {
      search: '–ü–æ–∏—Å–∫...',
      selectDate: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',
      selectCategory: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
      selectType: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø',
      enterAmount: '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É',
      enterDescription: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
      enterNote: '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'
    }
  },

  et: {
    appName: 'Kulude j√§lgija',
    dashboard: 'T√∂√∂laud',
    transactions: 'Tehingud',
    categories: 'Kategooriad',
    settings: 'Seaded',
    save: 'Salvesta',
    cancel: 'T√ºhista',
    delete: 'Kustuta',
    edit: 'Muuda',
    add: 'Lisa',
    back: 'Tagasi',
    loading: 'Laadin...',
    confirmDelete: 'Kas olete kindel, et soovite selle kustutada?',
    actions: 'Tegevused',
    close: 'Sulge',
    yes: 'Jah',
    no: 'Ei',
    all: 'K√µik',
    filter: 'Filter',
    reset: 'L√§htesta',
    apply: 'Rakenda',
    search: 'Otsi',
    welcome: 'Tere tulemast tagasi',
    balance: 'Saldo',
    income: 'Sissetulek',
    expense: 'V√§ljaminek',
    recentTransactions: 'Hiljutised tehingud',
    noTransactions: 'Tehinguid veel pole. Lisa esimene tehing!',
    viewAll: 'Vaata k√µiki',
    totalIncome: 'Kogusissetulek',
    totalExpense: 'Koguv√§ljaminek',
    expenseByCategory: 'Kulud kategooriate kaupa',
    incomeVsExpense: 'Sissetulek vs v√§ljaminek',
    thisMonth: 'See kuu',
    lastMonth: 'Eelmine kuu',
    thisYear: 'See aasta',
    custom: 'Kohandatud',
    transaction: 'Tehing',
    addTransaction: 'Lisa tehing',
    editTransaction: 'Muuda tehingut',
    deleteTransaction: 'Kustuta tehing',
    transactionAdded: 'Tehing lisatud',
    transactionUpdated: 'Tehing uuendatud',
    transactionDeleted: 'Tehing kustutatud',
    amount: 'Summa',
    date: 'Kuup√§ev',
    description: 'Kirjeldus',
    category: 'Kategooria',
    type: 'T√º√ºp',
    note: 'M√§rkus',
    incomeType: 'Sissetulek',
    expenseType: 'V√§ljaminek',
    addFirstTransaction: 'Lisa oma esimene tehing',
    addCategory: 'Lisa kategooria',
    editCategory: 'Muuda kategooriat',
    deleteCategory: 'Kustuta kategooria',
    categoryName: 'Kategooria nimi',
    categoryType: 'Kategooria t√º√ºp',
    categoryAdded: 'Kategooria lisatud',
    categoryUpdated: 'Kategooria uuendatud',
    categoryDeleted: 'Kategooria kustutatud',
    language: 'Keel',
    currency: 'Valuuta',
    dateFormat: 'Kuup√§eva formaat',
    theme: 'Teema',
    light: 'Hele',
    dark: 'Tume',
    system: 'S√ºsteemi j√§rgi',
    appSettings: 'Rakenduse seaded',
    customizeApp: 'Kohanda rakendust',
    decimalPrecision: 'Komakohtade arv',
    twoDecimals: '2 kohta peale koma (nt 10,99)',
    noDecimals: 'T√§isarvud (nt 11)',
    dataManagement: 'Andmete haldamine',
    exportData: 'Ekspordi andmed',
    importData: 'Impordi andmed',
    backupInfo: 'Varukoopia info',
    lastBackup: 'Viimane varukoopia',
    backupSize: 'Varukoopia suurus',
    accountSettings: 'Konto seaded',
    emailAddress: 'E-post',
    timeZone: 'Ajav√∂√∂nd',
    saveChanges: 'Salvesta muudatused',
    resetToDefaults: 'L√§htesta vaikev√§√§rtustele',
    error: {
      required: 'See v√§li on kohustuslik',
      invalidEmail: 'Sisesta kehtiv e-post',
      minLength: 'Minimaalne pikkus: {{min}} t√§hem√§rki',
      maxLength: 'Maksimaalne pikkus: {{max}} t√§hem√§rki',
      invalidDate: 'Vale kuup√§eva formaat',
      invalidAmount: 'Sisesta kehtiv summa',
      invalidNumber: 'Sisesta kehtiv number',
      invalidCategory: 'Vali kehtiv kategooria',
      invalidType: 'Vali kehtiv t√º√ºp',
      loadTransactions: 'Tehingute laadimine eba√µnnestus',
      unknown: 'Tundmatu viga'
    },
    success: {
      settingsSaved: 'Seaded salvestatud',
      transactionAdded: 'Tehing lisatud'
    },
    confirm: {
      deleteTransaction: 'Kas kustutada see tehing?',
      deleteCategory: 'Kas kustutada see kategooria?'
    },
    placeholder: {
      search: 'Otsi...',
      selectDate: 'Vali kuup√§ev',
      selectCategory: 'Vali kategooria',
      selectType: 'Vali t√º√ºp',
      enterAmount: 'Sisesta summa',
      enterDescription: 'Sisesta kirjeldus',
      enterNote: 'Lisa m√§rkus (valikuline)'
    }
  }
};

// --- utilities for settings ---
function getSettings() {
  try { return JSON.parse(localStorage.getItem(SETTINGS_KEY) || '{}'); }
  catch { return {}; }
}
function saveSettings(s) {
  localStorage.setItem(SETTINGS_KEY, JSON.stringify(s));
}

// API
function t(key, params={}) {
  const read = (lang, k) => k.split('.').reduce((o, p) => o && o[p], translations[lang]);
  let value = read(currentLanguage, key) ?? read(DEFAULT_LANGUAGE, key) ?? key;
  if (typeof value === 'string') {
    for (const [k, v] of Object.entries(params)) value = value.replaceAll(`{{${k}}}`, v);
  }
  return value;
}
function formatDate(date, opts={}) {
  const d = date instanceof Date ? date : new Date(date);
  if (isNaN(d)) return '';
  return new Intl.DateTimeFormat(currentLanguage, { year:'numeric', month:'short', day:'numeric', ...opts }).format(d);
}
function formatCurrency(amount, currency) {
  const s = getSettings();
  const curr = currency || s.currency || currentCurrency || 'USD';
  const decimals = s.decimalPlaces ?? 2;
  try {
    return new Intl.NumberFormat(currentLanguage, { style:'currency', currency: curr, minimumFractionDigits: decimals, maximumFractionDigits: decimals }).format(Number(amount)||0);
  } catch { return `${curr} ${(Number(amount)||0).toFixed(decimals)}`; }
}

const languageListeners = [];
function onLanguageChange(cb){ if (typeof cb==='function') languageListeners.push(cb); }
function notifyLanguage(lang){ languageListeners.forEach(cb=>{ try{cb(lang);}catch{}}); }

function isRTL(lang){ return ['ar','he','fa','ur'].includes(lang); }
function getSupportedLanguages(){ return SUPPORTED_LANGUAGES; }
function getCurrentLanguage(){ return currentLanguage; }

async function setLanguage(lang) {
  if (!translations[lang]) lang = DEFAULT_LANGUAGE;
  if (lang === currentLanguage) return;
  currentLanguage = lang;
  const s = getSettings(); s.language = lang;
  if (!s.currency) s.currency = SUPPORTED_LANGUAGES[lang]?.defaultCurrency || 'USD';
  saveSettings(s);
  document.documentElement.lang = lang;
  document.documentElement.dir = isRTL(lang) ? 'rtl' : 'ltr';
  updatePageTranslations();
  notifyLanguage(lang);
}

const currencyListeners = [];
function onCurrencyChange(cb){ if (typeof cb==='function') currencyListeners.push(cb); }
function notifyCurrencyChange(c){ currencyListeners.forEach(cb=>{ try{cb(c);}catch{}}); }
function getCurrentCurrency(){ const s=getSettings(); return s.currency || SUPPORTED_LANGUAGES[currentLanguage]?.defaultCurrency || 'USD'; }
function setCurrency(currency){
  const s=getSettings(); s.currency = currency; saveSettings(s);
  currentCurrency = currency;
  updatePageTranslations();
  notifyCurrencyChange(currency);
}

function updatePageTranslations(){
  document.querySelectorAll('[data-i18n]').forEach(el=>{
    const key = el.getAttribute('data-i18n'); if (!key) return;
    if (key.startsWith('[')) {
      const m = key.match(/^\[([^\]]+)\](.+)$/); if (!m) return;
      el.setAttribute(m[1], t(m[2]));
    } else {
      if (el.tagName==='INPUT' || el.tagName==='TEXTAREA') {
        if (el.placeholder) el.placeholder = t(key);
      } else el.textContent = t(key);
    }
  });
}

async function initI18n(){
  const s = getSettings();
  let lang = s.language || navigator.language.split('-')[0];
  if (!translations[lang]) lang = DEFAULT_LANGUAGE;
  await setLanguage(lang);
  if (s.currency) setCurrency(s.currency);
  else setCurrency(SUPPORTED_LANGUAGES[lang]?.defaultCurrency || 'USD');
  updatePageTranslations();
  return lang;
}

// ---------------------------------------------------------------------------
// Currency helpers & simple FX storage (EUR / USD / RUB)
// Base currency for rates is EUR = 1. Numbers are stored in localStorage.
// ---------------------------------------------------------------------------

const CURRENCY_SYMBOLS = { EUR: '‚Ç¨', USD: '$', RUB: '‚ÇΩ' };

/** Return a symbol for a given currency code (fallback to the code). */
function getCurrencySymbol(code) {
  const c = String(code || '').toUpperCase();
  return CURRENCY_SYMBOLS[c] || c || '';
}

/** Read FX rates (per 1 EUR) from localStorage. */
function getFxRates() {
  try {
    const raw = localStorage.getItem('expenseTrackerFx');
    const data = raw ? JSON.parse(raw) : null;
    // Reasonable defaults if nothing saved yet:
    return data || { EUR: 1, USD: 1.08, RUB: 95 };
  } catch {
    return { EUR: 1, USD: 1.08, RUB: 95 };
  }
}

/** Write FX rates (per 1 EUR) to localStorage with basic validation. */
function setFxRates(rates) {
  const current = getFxRates();
  const next = { ...current, ...rates };
  // sanitize: enforce positive finite numbers; EUR must be 1
  next.EUR = 1;
  ['USD', 'RUB'].forEach((k) => {
    const v = Number(next[k]);
    next[k] = Number.isFinite(v) && v > 0 ? v : current[k];
  });
  localStorage.setItem('expenseTrackerFx', JSON.stringify(next));
  return next;
}

/**
 * Convert amount from one currency to another using per-1 EUR quotes.
 * Example: if rates = {EUR:1, USD:1.08, RUB:95}
 *   convertCurrency(100, 'EUR', 'RUB') = 100 * 95
 *   convertCurrency(100, 'USD', 'EUR') = 100 / 1.08
 *   convertCurrency(100, 'USD', 'RUB') = 100 * (95 / 1.08)
 */
function convertCurrency(amount, from, to) {
  const a = Number(amount);
  if (!Number.isFinite(a)) return 0;

  const src = String(from || '').toUpperCase() || 'EUR';
  const dst = String(to || '').toUpperCase() || getCurrentCurrency();

  if (src === dst) return a;

  const r = getFxRates();
  const rf = Number(r[src] ?? 1); // how many src per 1 EUR? -> actually per-1 EUR rate of src
  const rt = Number(r[dst] ?? 1);

  // Convert src -> EUR -> dst
  const inEUR = a / rf;
  return inEUR * rt;
}

/**
 * Convenience helper: format a value that is stored in `fromCurrency`
 * into the current UI currency (or provided `displayCurrency`).
 */
function formatToDisplayCurrency(amount, fromCurrency, displayCurrency) {
  const target = displayCurrency || getCurrentCurrency();
  const converted = convertCurrency(amount, fromCurrency, target);
  return formatCurrency(converted, target);
}


export default {
  t,
  formatDate,
  formatCurrency,
  // language & currency
  setLanguage,
  getCurrentLanguage,
  getSupportedLanguages,
  onLanguageChange,
  onCurrencyChange,
  initI18n,
  isRTL,
  updatePageTranslations,
  setCurrency,
  getCurrentCurrency,
  // NEW: currency helpers + FX
  getCurrencySymbol,
  getFxRates,
  setFxRates,
  convertCurrency,
  formatToDisplayCurrency
};

// Also expose globally for convenience (useful in simple pages)
window.i18n = {
  t,
  formatDate,
  formatCurrency,
  setLanguage,
  getCurrentLanguage,
  getSupportedLanguages,
  onLanguageChange,
  onCurrencyChange,
  initI18n,
  isRTL,
  updatePageTranslations,
  setCurrency,
  getCurrentCurrency,
  // NEW: currency helpers + FX
  getCurrencySymbol,
  getFxRates,
  setFxRates,
  convertCurrency,
  formatToDisplayCurrency
};


// Also expose globally for convenience
window.i18n = { t, formatDate, formatCurrency, setLanguage, getCurrentLanguage, getSupportedLanguages, onLanguageChange, onCurrencyChange, initI18n, isRTL, updatePageTranslations, setCurrency, getCurrentCurrency };
